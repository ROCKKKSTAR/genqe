import { SrvRecord } from 'dns';
import { BoardingPassComponent } from '../components/boarding-pass/boarding-pass.component';

export interface ILanguage {
  language: string;
  admin: LAdmin;
  noData: string;
  // admission: LAdmission;
  partnerresponse: LPartnerResponse;

  login: LLogin;

  project: LPROJECTS;

  promtTemp: LPromptTemp;

  documentTemp: LDocumentTemp;

  buttons: {
    sendCode: string;
    cancel: string;
    login: string;
    rememberMe: string;
    enableBiometric: string;
    enableSingleSignIn: string;
    resetPassword: string;
    termsAndConditions: string;
    privacyPolicy: string;

    activate: string;
    deactivate: string;
    import: string;
    importPP: string;
    new: string;
    reset: string;
    search: string;
    save: string;
    close: string;
    dashboard: string;
    admission: string;
    admissionpos: string;
    orders: string;
    catalog: string;
    cloneToken: string;
    partnerresponses: string;
    fileImportExport: string;
    wasConsumption: string;
    partnercontract: string;
    masters: string;
    partner: string;
    lounge: string;
    airport: string;
    currency: string;
    audit: string;
    country: string;
    pincode: string;
    token: string;
    admissionToken: string;
    product: string;
    cloneEnt: string;
    actionhistory: string;
    deleteToken: string;
    users: string;
    members: string;
    devices: string;
    submit: string;
    updateDoc: string;
    noSample: string;
    addNewPhotos: string;
    approve: string;
    reject: string;
    addNewUser: string;
    addNewTimings: string;
    addNewShifts: string;
    generateai: string;
    vendor: string;
    tax: string;
    reports: string;
    globalsettings: string;
    whiteslist: string;
    blacklist: string;
    cloneRole: string;
    aiMasters: string;
    lmsMasters: string;
    securityMasters: string;
    CustomerInteraction: string;
    boardingPass: string;

    applications: string;
    channels: string;
    promptTemp: string;
    documentTemp: string;
    testBox: string;
    trainModel: string;
    trainNewModel: string;
    testPlanning: string;
    testCaseManagment: string;
    testExecution: string;
    defects: string;
    reportAndAnalytics: string;
    intakeAssignments: string;
  };
  header: {
    country: string;
    language: string;
    outlet: string;
    Partner: string;
    User: string;
  };
  dashboard: {
    overview: string;
    lastWeek: string;
    lastMonth: string;
    lastYear: string;
    allTime: string;
    nUsers: string;
    twelve: string;
    nPartners: string;
    twentyOne: string;
    nOrders: string;
    twoTwentyF: string;
    nProducts: string;
    seven: string;
    currentCntL: string;
    members: string;
    admissionTokens: string;
    five3: string;
    tCntL: string;
    tSellProducts: string;
    totalSales: string;
    t3f: string;
    spServe: string;
    kdAr: string;
    meetingRoom: string;
    visitAdmissionToken: string;
    Top10Partner: string;
    Top10PartnerForBoardingPass: string;
    visitPartnerName: string;
  };
  token: {
    tokenNumber: string;
    tokenStartDate: string;
    partnerCard: string;
    cardMembership: string;
    tokenStartDateP: string;
    tokenEndDate: string;
    tokenEndDateP: string;
    filters: string;
    found: string;
    resultsIn: string;
    sortingOn: string;
    sortOn: string;
    clearFilters: string;
    hmacNu: string;
    redeemedOn: string;
    redeemedBy: string;
    redeemed: string;
    expired: string;
    loadMore: string;
    whitelistToken: string;
    startDateP: string;
    endDateP: string;
    blacklistToken: string;
    comment: string;
    reason: string;
    commentP: string;
    quotaP: string;
    entercardnumber: string;
    cancelledOn: string;
    cancelledBy: string;
    partnermigration: string;
    migrateyourparntercouponshere: string;
    migrate: string;
    selectpartnertomigratecoupons: string;
    selectpartnername: string;
    findpartnercouponmapping: string;
    findadmissioninstruction: string;
    migrationcount: string;
    migrationcomplete: string;
    migrateagain: string;

    failedtoken: string;
    viewfailedtoken: string;
    tokencode: string;
    entertokencode: string;
    tokentype: string;
    createdby: string;
    entercreatedby: string;
    searchfailedtoken: string;
    description: string;
    tokencategory: string;
    enterdescription: string;
    generatedCouponCount: string;
    redeemedCouponCount: string;
    expiredCouponCount: string;
    startBalance: string;
    couponSummaryReport: string;
    couponSummaryReportTxt: string;
  };
  boardingPass: {
    export: string;
    boardingPass: string;
    bpdata: string;
  };

  fileImportExport: IFileImportExport;
  admission: LAdmission;
  generateCoupons: LGenerateCoupons;
  master: {
    channel: LChannel;
    showerBookings: any;
    flightRoutes: any;
    partner: LPartner;
    lounge: LLounge;
    hsbc: LHSBC;
    user: LUser;
    action: LAction;
    member: LMember;
    admissionToken: LAdmissionToken;
    partnerContract: LPartnerContract;
    product: LProduct;
    catalog: LCatalog;
    order: LOrder;
    device: LDevice;
    airport: LAirport;
    country: LCountry;
    chatBot: IChatBotConversation;
    pincode: LPincode;
    vendor: LVendor;
    module: LModule;
    role: LRole;
    df: LDelayedFlight;
    receipt: LReceipt;
    currency: LCurrency;
    audit: LAudit;
    possalesreport: LPossalesreport;
    GlobalSettings: LGlobalSettings;
    reports: LReports;
    tax: LTax;
    airlinescodes: LAirlinesCodes;
    outletevents: LOutletEvents;
    dailyQuota: LDailyQuota;
    quotaRep: IQuotaRep;
    cardBinAccess: ICardBinAccess;
    cloneEnt: ICloneEnt;
  };
}

export interface LPROJECTS {
  syncApplication: string;
  import: string;
  new: string;
  search: string;
  applicationName: string;
  phEnterParentApplication: string;
  applicationCode: string;
  phEnterApplicationName: string;
  applicationShortCode: string;
  phEnterApplicationCode: string;
  applicationPartner: string;
  phEnterApplicationPartner: string;
  applicationDetails: string;
  applicationLead: string;
  phEnterApplicationLead: string;
  phChooseApplicationLabels: string;
  parentApplication: string;
  chooseApplicationLabels: string;
  selectTestApplicationType: string;
  generateTestCase: string;
  uploadApplicationDocument: string;
  applicationSettings: string;
  category: string;
  reset: string;
  close: string;
  domain: string;
  lastUpdatedOn: string;
  createdOn: string;
  action: string;
  description: string;
  status: string;
  labels: string;
  team: string;
  chooseTeam: string;
  features: string;
  sprints: string;
  generateDocument: string;
  issues: string;
  code: string;
  flows: string;
  testCase: string;
  trainModel: string;
  documents: string;
  fineTuning: string;
  variables: string;
  interface: string;
  linkto: string;
  add: string;
  name: string;
  type: string;
  chooseFeatureType: string;
  priority: string;
  estimatedStartDate: string;
  estimatedEndDate: string;
  actualStartDate: string;
  actualEndDate: string;
  dependencies: string;
  notes: string;
  enterName: string;
  goal: string;
  enterGoal: string;
  startDate: string;
  endDate: string;
  sprintStatus: string;
  sprintFeatures: string;
  save: string;
  event: string;
  selectDocuments: string;
  reason: string;
  remarks: string;
  sync: string;
  referenceIssueID: string;
  referenceIssueKey: string;
  author: string;
  fileName: string;
  repository: string;
  export: string;
  flowName: string;
  expectedResult: string;
  actor: string;
  basedOn: string;
  stepNumber: string;
  stepDescription: string;
  variable: string;
  sampleData: string;
  datatype: string;
  addStep: string;
  objective: string;
  preCondition: string;
  testData: string;
  steps: string;
  usefrom: string;
  uploadFile: string;
  upload: string;
  documentName: string;
  generateTestCases: string;
  usedforTraining: string;
  fileType: string;
  uploadProjectDocument: string;
  delete: string;
  importFineTuning: string;
  IisUsedForTestCase: string;
  variableName: string;
  projectSettings: string;
  cancel: string;
  submit: string;
  enterLookUpCode: string;
  keyCode: string;
  phEnterKeyCode: string;
  key1: string;
  phEnterKey1: string;
  key2: string;
  phEnterKey2: string;
  key3: string;
  phEnterKey3: string;
  key4: string;
  phEnterKey4: string;
  key5: string;
  phEnterKey5: string;
  addApplication: string;
  fillthefollowingdetails: string;
  editApplication: string;
  editthefollowingdetails: string;
  environment: string;
  feature: string;
  chooseApplicationFeatures: string;
  sprint: string;
  generatedDocuments: string;
  enterEvent: string;
  events: string;
  commentId: string;
  commentBody: string;
  commentBy: string;
  commentedOn: string;
  refIssueID: string;
  refIssueKey: string;
  lastModifiedOn: string;
  className: string;
  functionsName: string;
  addWorkFlow: string;
  stepDescritpion: string;
  stepName: string;
  dataType: string;
  flowNumber: string;
  testCaseNumber: string;
  trainedModels: string;
  enterFileName: string;
  uploadedOn: string;
  summary: string;
  keyFeatures: string;
  keyFields: string;
  documentSummary: string;
  phEnterDocumentName: string;
  phEnterCreatedOn: string;
  downloadSummaryDocument: string;
  fineTuningDataSets: string;
  id: string;
  system: string;
  user: string;
  assistant: string;
  phEnterVariableName: string;
  inputType: string;
  minMax: string;
  defaultValue: string;
  editApplicationSetting: string;
  addApplicationSetting: string;
  generatedPrompts: string;
  promptCode: string;
  promptResponse: string;
  application: string;
  viewandEditdata: string;
  jIRAPROJECTCODE: string;
  showcompletedetails: string;
  phEnterDataType: string;
  isMandatory: string;
  enterIsMandatory: string;
  characterLimit: string;
  phEnterCharacterLimit: string;
  rangeMin: string;
  phEnterRangeMin: string;
  rangeMax: string;
  phEnterRangeMax: string;
  phEnterDefaultValue: string;
  regexPattern: string;
  phEnterRegexPattern: string;
  phEnterSettingdescription: string;
  phEnterInputType: string;
  addSteps: string;
  flowDiagram: string;
  phEnterFileName: string;
  phEnterAuthor: string;
  option: string;
  phEnterVariableOptions: string;
  interfaceUrl: string;
  functions: string;
  functionName: string;
  phEnterFunctionName: string;
  input: string;
  output: string;
  interfaceType: string;
}

export interface LPromptTemp {
  promptTemplate: string,
  viewedit: string,
  export: string,
  import: string,
  new: string,
  searchPromptTemplate: string,
  partnerName: string,
  phPartnerName: string,
  promptShortCode: string,
  phEnterPromptShortCode: string,
  promptStatus: string,
  reset: string,
  search: string,
  close: string,
  promptTemplateName: string,
  prompt: string,
  status: string,
  lastModifiedOn: string,
  addNewPromptTemplate: string,
  fillthefollowingdetails: string,
  phEnterPromptTemplateName: string,
  enterPrompt: string,
  promptCategory: string,
  partner: string,
  filterDocument: string,
  isSystemPrompt: string,
  samplePromptOutput: string,
  phEnterSamplePrompt: string,
  includeDocuments: string,
  add: string,
  documentType: string,
  criteria: string,
  fileType: string,
  save: string,
  submit: string
}

export interface LLogin {
  userId: string;
  password: string;
  oldPassword: string;
  newPassword: string;
  confirmNewPassword: string;
  loginWithCode: string;
  forgotPassword: string;
  register: string;
  login: string;

  pHuserName: string;
  pHpassword: string;
  pHPassword: string;
  pHNewPassword: string;
  pHConfirmNewPassword: string;
  pHloginCode: string;
}
export interface LChannel {
  txtHeading: string;
  txtDes: string;
  searchC: string;
  channelName: string;
  channelNameP: string;
  source: string;
  sourceP: string;
  destination: string;
  destinationP: string;
  status: string;
  active: string;
  inactive: string;
  createdOn: string;
  createdBy: string;
  addHeading: string;
  addDes: string;
  sourceStrBtn: string;
  destinationStrBtn: string;
  supportedEvent: string;
  isactive: string;
  sourceHeading: string;
  destinationHeading: string;
  channelSetting: string;
  settingName: string;
  key1: string;
  key1P: string;
  key2: string;
  key2P: string;
  key3: string;
  key3P: string;
  key4: string;
  key4P: string;
  key5: string;
  key5P: string;
  lkCode: string;
  lkCodeP: string;
  keyCode: string;
  keyCodeP: string;
  desCS: string;
  desPCS: string;
  addCS: string;
  username: string;
  password: string;
  url: string;
}
export interface IFileImportExport {
  requestNo: string;
  fileName: string;
  fileFormatType: string;
  activity: string;
  recordProcessed: string;
  recordSuccess: string;
  performedBy: string;
  activityDate: string;
  columnName: string;
  rowNo: string;
  columnNo: string;
  colData: string;
  createdOn: string;
  fileNameP: string;
  fromDate: string;
  fromDateP: string;
  toDate: string;
  toDateP: string;
  fileH: string;
  fileTxt: string;
  fileError: string;
  fileErrorTxt: string;
  searchFile: string;
  enterPartner: string;
  enterValidPartner: string;
  selectValidImportType: string;
  entityname: string;
  filename: string;
  filetoimport: string;
  importfile: string;
  fillthefollowingdetailstoimportfileinthesystem: string;
  accessDenied: string;
}
export interface LAirport {
  txtHeading: string;
  txtDes: string;
  airportName: string;
  airportCode: string;
  airportCity: string;
  airportState: string;
  airportCountry: string;
  searchPortSt: string;
  portHeading: string;
  portDes: string;
  isActive: boolean;
  enterAirportName: string;
  enterAirportCode: string;
  enterAirportCity: string;
  enterAirportState: string;
  enterAirportCountry: string;
  PleaseenteraPortName: string;
  PleaseenteraPortCode: string;
  PleaseenteraPortCity: string;
  PleaseenteraPortstate: string;
  PleaseenteraPortContinent: string;
  PleaseenteraPortRegion: string;
  PleaseenteraPortCountry: string;
  PleaseenteraPortTimezone: string;
  PleaseenteraPortTimezoneInUTC: string;
  portcontinent: string;
  portregion: string;
  porttimezone: string;
  enterportcontinent: string;
  enterportregion: string;
  entertimezone: string;
  status: string;
  porttimezoneinutc: string;
  porttype: string;
}
export interface LCountry {
  txtHeading: string;
  txtDes: string;
  searchCountry: string;
  name: string;
  language: string;
  currency: string;
  status: string;
  enterCountryName: string;
  enterCountryLanguage: string;
  enterCountryCurrency: string;
  enterCountryISOCode: string;
  countryHeading: string;
  countryDes: string;
  isActive: boolean;
  countryISOCode: string;
  region: string;
  pleaseenteracountryname: string;
  pleaseenteralanguage: string;
  pleaseenteracurrency: string;
  pleaseenteracountrycode: string;
}
export interface LCurrency {
  txtHeading: string;
  txtDes: string;
  searchCurrency: string;
  name: string;
  currencyCode: string;
  value: number;
  respectTo: string;
  enterCurrencyName: string;
  enterCurrencyCode: string;
  enterCurrencyValue: number;
  addCurrencyHeading: string;
  editCurrencyHeading: string;
  addCurrencyDes: string;
  editCurrencyDes: string;
  action: string;
  accessDenied: string;
  enterrespectTo: string;
}
export interface LAudit {
  moduleName: string;
  actionName: string;
  api: number;
  access: string;
  status: string;
  userName: string;
  txtHeading: string;
  txtDes: string;
  searchAudit: string;
  enterModuleName: string;
  enterActionName: string;
  enterApi: string;
  enterAccess: string;
  enterStatus: string;
  enterUserName: string;
  requestHeader: string;
  requestBody: string;
  createdOn: string;
}

export interface LPincode {
  txtHeading: string;
  txtDes: string;
  searchPincode: string;
  pincode: string;
  countryName: string;
  countryISOCode: string;
  stateName: string;
  cityName: string;
  submt: string;
  region: string;
  status: string;
  enterPincode: string;
  enterCountryName: string;
  enterCountryISOCode: string;
  enterStateName: string;
  isActive: string;
  pincodeHeading: string;
  pincodeDes: string;
  PleaseenteraPincode: string;
  PleaseenteraCountryName: string;
  PleaseenteraCountryISOCode: string;
  PleaseenteraStateName: string;
  PleaseselectaCityName: string;
  PleaseselectaRegion: string;
}
export interface LDevice {
  txtHeading: string;
  search: string;
  AccessDeniedformoduleDEVICESactionDELETE: string;
  txtDes: string;
  deviceName: string;
  deviceType: string;
  dev1: string;
  dev2: string;
  deviceBrand: string;
  br1: string;
  br2: string;
  deviceTag: string;
  enterDeviceTag: string;
  deviceCategory: string;
  catg1: string;
  catg2: string;
  stat: string;
  act: string;
  inAct: string;
  serialNu: string;
  crtLa: string;
  addNew: string;
  addDes: string;
  dlAir: string;
  mbInt: string;
  enterDeviceName: string;
  enterSerialNu: string;
  selectDeviceType: string;
  enterAvailableAtOutlet: string;
  selectDeviceCategory: string;
  selectDeviceBrand: string;
  delConf: string;
  msg: string;
  yes: string;
  no: string;
  accessD: string;
  acDen: string;
  noSuch: string;
  noDataFound: string;
}
export interface LPossalesreport {
  txtHeading: string;
  txtDes: string;
  receiptNum: string;
  enterReceiptNum: string;
  curr: string;
  enterCurr: string;
  payM: string;
  gst: string;
  enGst: string;
  saleD: string;
  enSalD: string;
  inAmt: string;
  enAmt: string;
  quant: string;
  enQuant: string;
  runReport: string;
  fromD: string;
  tillD: string;
  details: string;
  mTxt: string;
  export: string;
  rectN: string;
  curn: string;
  paymentMethod: string;
  approvalCode: string;
  receiveAmt: string;
}
export interface LOrder {
  txtHeading: string;
  txtDes: string;
  searchO: string;
  on: string;
  od: string;
  oa: string;
  adu: string;
  an: string;
  st: string;
  cantFindProduct: string;
  printerNotFound: string;
  selectProduct: string;
  orderno: string;
  orderdate: string;
  orderamount: string;
  admissionno: string;
  pendingamount: string;
  port: string;
  name: string;
  sku: string;
  servicetime: string;
  quantity: string;
  price: string;
  ispaid: string;
  newitem: string;
  buynewitem: string;
  product: string;
  payments: string;
  paymentid: string;
  amount: string;
  products: string;
  collectedby: string;
  collectedon: string;
  refunded: string;
  searchbynameorsku: string;
  entersku: string;
  addproduct: string;
  orderdetails: string;
  viewtheordersdetailsinlounge: string;
  enteron: string;
  walkinPOS: string;
  receiptno: string;
}
export interface LCatalog {
  txtHeading: string;
  txtDes: string;
  searchC: string;
  pn: string;
  pt: string;
  cu: string;
  pr: string;
  lp: string;
  des: string;
  addValidQuotaValue: string;
  invalidStartDate: string;
  invalidEndDate: string;
  datesNotValid: string;
  reasonForBlacklist: string;
  enterComment: string;
  noMoreTokenAvailable: string;
}
export interface LPartner {
  card: string;
  names: string;
  users: string;
  membership: string;
  cardnumbered: string;
  expdates: string;
  expa: string;
  namecard: string;
  cardnums: string;
  numbered: string;
  reenter: string;
  checkbox: string;
  cardnumber: string;
  recardnumber: string;
  matched: string;
  agreed: string;
  submitted: string;
  dismissed: string;
  informations: string;
  usrname: string;
  lmsverify: string;
  ornumb: string;
  otcode: string;
  tkncode: string;
  frmdate: string;
  todate: string;
  remaks: string;
  actn: string;
  rcptnum: string;
  created: string;
  receipt: string;
  countboard: string;
  gstname: string;
  tkname: string;
  done: string;
  outcde: string;
  stat: string;
  tokencode: string;
  descrip: string;
  admid: string;
  worderno: string;
  search: string;
  viewwmsdata: string;
  wascondata: string;
  viewwmscmp: string;
  wsconmp: string;
  chr: string;
  cnfd: string;
  rst: string;
  runrepo: string;
  expot: string;
  rgn: string;
  airprt: string;
  loungenam: string;
  loungeloc: string;
  cardFirst6: string;
  cardLast4: string;
  holderName: string;
  airport: string;
  outlet: string;
  sDate: string;
  eDate: string;
  reset: string;
  runReport: string;
  export: string;
  shift: string;
  ststs: string;
  tdate: string;
  frdate: string;
  txtHeading: string;
  txtDes: string;
  searchP: string;
  partnerName: string;
  partnerType: string;
  status: string;
  onBoarding: string;
  action: string;
  partnerCategory: string;
  identificationNo: string;
  identificationNoP: string;
  entities: string;
  contacts: string;
  addEntity: string;
  addContact: string;
  postalCode: string;
  contactRole: string;
  state: string;
  city: string;
  country: string;
  allianceProgram: string;
  entityCode: string;
  newContact: string;
  name: string;
  designation: string;
  email: string;
  number: string;
  contactName: string;
  contactDesignation: string;
  contactNo: string;
  contactEmail: string;
  entity: string;
  contactType: string;
  partnerSettings: string;
  settingName: string;
  settingDes: string;
  settingV1: string;
  settingV2: string;
  settingV3: string;
  entityP: string;
  address1P: string;
  address2P: string;
  postalCodeP: string;
  cityP: string;
  stateP: string;
  contactNameP: string;
  contactDesignationP: string;
  contactNoP: string;
  contactEmailP: string;
  entityName: string;
  addressL1: string;
  addressL2: string;
  newPartner: string;
  newPartnerTxt: string;
  tinP: string;
  tin: string;
  entityTin: string;
  entityTinP: string;
  region: string;
  partnerSC: string;
  partnerSCP: string;
  entityCategory: string;
  partnerEntity: string;
  partnerEntityP: string;
  pleaseEnterPartnerName: string;
  partTin: string;
  partTyp: string;
  partCat: string;
  selectCont: string;
  selectStatus: string;
  pleaseEnterPartSC: string;
  partSc: string;
  pleaseAdd: string;
  postCode: string;
  partState: string;
  partCity: string;
  createPart: string;
  partEntN: string;
  partEntTin: string;
  partEntCat: string;
  partEntCatG: string;
  partEntL: string;
  partEntR: string;
  entAdd: string;
  entPost: string;
  entSt: string;
  entCt: string;
  selEntCt: string;
  entPartSc: string;
  partScS: string;
  entSta: string;
  selEntC: string;
  partSpC: string;
  spN: string;
  entCD: string;
  entCN: string;
  invN: string;
  contEm: string;
  validEmail: string;
  cntPartEnt: string;
  cntRole: string;
  key1: string;
  key2: string;
  key3: string;
  key4: string;
  key5: string;
  delConf: string;
  msg: string;
  labCnf: string;
  no: string;
  delPart: string;
  sendAI: string;
  sendMsg: string;
  delMsg: string;
  delSup: string;
  delSupMsg: string;
  accMsg: string;
  downSucc: string;
  notDown: string;
  admTokNot: string;
  accessDen: string;
  cbcopymsg: string;
  clicktocopy: string;
  clientLegal: string;
  allOutlet: string;
  isAvailableOnWeb: string;
  cbcopylocmsg: string;
}

export interface LPartnerContract {
  contractH: string;
  status: string;
  tokenupdate: string;
  updatecontract: string;
  contractTxt: string;
  searchTxt: string;
  contractType: string;
  startOn: string;
  startOnP: string;
  endOn: string;
  endOnP: string;
  newContractH: string;
  newContractTxt: string;
  contractTokens: string;
  addToken: string;
  selectToken: string;
  partnerP: string;
  EnterContractStartDate: string;
  EnterContractEndDate: string;
  SelectContractType: string;
  ContractDaysDifferenceshouldbegreaterthan7days: string;
  ContractEndDateCannotBeLessThanContractStartDate: string;
  InvalidContractQuota: string;
  ContractQuota: string;
  unlimited: string;
  partnerQuotaP: string;
  contractQuotaRefresh: string;
  selectcontractQuotaRefresh: string;
  renewContract: string;
  downloadAI: string;
  generatingZipFile: string;
}

export interface LAdmissionToken {
  deleteTokenMsg: string;
  confirmDelete: string;
  confirmCloneEntOutlet: string;
  confirmCloneEnt: string;
  txtHeading: string;
  txtDes: string;
  searchToken: string;
  searchEntitlement: string;
  tokenName: string;
  admissionTokenType: string;
  partnerName: string;
  cloneEntSamOutlet: string;
  tokenShortCode: string;
  onlineintegrate: string;
  quotaType: string;
  admissionTokenStatus: string;
  outletname: string;
  bin: string;
  couponcontains: string;
  searchoutletbinproduct: string;
  validateEntitlement: string;
  primaryEntitlement: string;
  guestEntitlement: string;
  delEntitlements: string;
  cloneEntSam: string;
  cloneEntSam1: string;
  from: string;
  destination: string;
  selectallBINs: string;
  contract: string;
  update: string;
  reason: string;
  comment: string;
  outlet: string;
  modifiedon: string;
  modifiedby: string;
  issuingCountry: string;
  admissionTokenCategory: string;
  baseCurrency: string;
  status: string;
  lastModifiedOn: string;
  lastModifiedBy: string;
  addNewAdmissionToken: string;
  addNewAdmissionTokenDes: string;
  issuingLanguage: string;
  color: string;
  tokenIdentification: string;
  tokenRefreshDate: string;
  applicableAt: string;
  entitlements: string;
  tokenSamples: string;
  generateTokenId: string;
  localisation: string;
  addNewPattern: string;
  maskPattern: string;
  startBin: string;
  endBin: string;
  ruleSequence: string;
  action: string;
  addNewApplicable: string;
  binRange: string;
  loungeName: string;
  loungeCountry: string;
  loungeBrand: string;
  addNewEntl: string;
  applicableTo: string;
  entl: string;
  quota: string;
  within: string;
  fallbackEntl: string;
  discountType: string;
  discountedPrice: string;
  addNewTokenSample: string;
  generatedToken: string;
  generatedBy: string;
  generatedOn: string;
  expiresOn: string;
  usedOn: string;
  addNewTokenId: string;
  attribute: string;
  docDes: string;
  entrToken: string;
  selectTokenType: string;
  selectPart: string;
  selectCat: string;
  selectIdBy: string;
  selectIssuingC: string;
  selectIssL: string;
  selectBaseC: string;
  maskPattL: string;
  startBn: string;
  edBn: string;
  samBn: string;
  entrTC: string;
  validation: string;
  terms: string;
  entQnt: string;
  prod: string;
  partEnt: string;
  addDocs: string;
  name: string;
  desc: string;
  attr: string;
  type: string;
  search: string;
  noData: string;
  tokenContains: string;
  airCode: string;
  travelCode: string;
  addNewPatt: string;
  length: string;
  idnBin: string;
  idBinTo: string;
  addNewApp: string;
  valEnt: string;
  addNewEnt: string;
  selectOutlet: string;
  entProduct: string;
  currency: string;
  select: string;
  uploadToken: string;
  importVoucher: string;
  voucherContains: string;
  startDate: string;
  endDate: string;
  count: string;
  generatedTokenSam: string;
  generateVouchers: string;
  approve: string;
  reject: string;
  selectOut: string;
  close: string;
  accessDenied: string;
  uploadTokenSample: string;
  titleDel: string;
  msg: string;
  docmsg: string;
  yes: string;
  no: string;
  txtColor: string;
  AccModule: string;
  couldBinRange: string;
  draftToken: string;
  delMsgToken: string;
  generatingVoucher: string;
  entrCntVoucher: string;
  selectTokenContains: string;
  msgDel: string;
  updatingToken: string;
  selectBinRange: string;
  selectLounge: string;
  updateTokenEnt: string;
  selectBinAddEnt: string;
  selectLoungeEnt: string;
  selectAppiclable: string;
  selectEntProd: string;
  quotaCan: string;
  selectWithin: string;
  selectCurr: string;
  couldNot: string;
  selectDisc: string;
  confirmClone: string;
  newTokenDraft: string;
  black: string;
  validEnt: string;
  admEntVal: string;
  entVal: string;
  fetchOutlet: string;
  availOut: string;
  selectOutlets: string;
  generatingPdf: string;
  downloadedSuccessfully: string;
  notDown: string;
  fetchToken: string;
  countrySearch: string;
  enterLength: string;
  entrMaskPattern: string;
  entrBinID: string;
  enterRuleSeq: string;
  Sharedwith: string;
  SharedBy: string;
  SharedOn: string;
  SQRch: string;
  qrimportStatus: string;
  remarks: string;
  discountedPercent: string;
  unlimited: string;
}

export interface LAdmission {
  admH: string;
  adTxt: string;
  search: string;
  partN: string;
  adN: string;
  frD: string;
  tD: string;
  status: string;
  admNu: string;
  memId: string;
  type: string;
  doA: string;
  partNa: string;
  outletN: string;
  add: string;
  totalG: string;
  statusT: string;
  action: string;
  adNew: string;
  newDes: string;
  tokenType: string;
  tokenCode: string;
  partner: string;
  adToken: string;
  walk: string;
  checkPartner: string;
  next: string;
  verifyToken: string;
  select: string;
  black: string;
  white: string;
  admTokenName: string;
  applicableTo: string;
  productN: string;
  service: string;
  qaunt: string;
  price: string;
  quota: string;
  within: string;
  usedQ: string;
  entQ: string;
  verifyTokenEnt: string;
  terms: string;
  guestD: string;
  guestN: string;
  guestEmail: string;
  guestPhone: string;
  docName: string;
  desc: string;
  uploadDoc: string;
  collectPay: string;
  redeemToken: string;
  dateofAdm: string;
  endofAdm: string;
  mem: string;
  memEmail: string;
  memMob: string;
  totalGuest: string;
  tokenName: string;
  outletName: string;
  ouletAdd: string;
  cancelledby: string;
  re: string;
  admit: string;
  remarks: string;
  entitlements: string;
  guests: string;
  docs: string;
  productSku: string;
  currency: string;
  quantST: string;
  name: string;
  email: string;
  phoneNum: string;
  typ: string;
  em: string;
  phone: string;
  attr: string;
  docLink: string;
  sear: string;
  air: string;
  flight: string;
  airL: string;
  entrPart: string;
  entrAd: string;
  entrTokenCode: string;
  selectValidPartner: string;
  entQnt: string;
  guestEntQnt: string;
  maxGrpEnt: string;
  selPrm: string;
  cmpEntQnt: string;
  cmpEnt: string;
  prCmp: string;
  guestDocs: string;
  docInc: string;
  findDoc: string;
  docMeta: string;
  deterLounge: string;
  decrDate: string;
  accessDenied: string;
  titleRe: string;
  ongoingAdm: string;
  reEntr: string;
  no: string;
  blackC: string;
  certEnc: string;
  entrDate: string;
  entrGuestEmail: string;
  entrNo: string;
  enterDateOfAdm: string;
  enterEndOfAdm: string;
  entrMem: string;
  enterMemEmail: string;
  enterMobileNum: string;
  boardingPass: string;
  dateTime: string;
  capturedOn: string;
  dateOfFlight: string;
  frequentFlyerNumber: string;
  sT: string;
  eT: string;
  invoiceNo: string;
  method: string;
  refNo: string;
  settlement: string;
  moasbuuad: string;
  oldSettlement: string;
  settleData: string;
  settle: string;
  genSettle: string;
  markSettle: string;
  close: string;
  tOrder: string;
  tAmount: string;
  CollectedBy: string;
  settledBy: string;
  Transactions: string;
  SettledToDate: string;
  CollectionFromDate: string;
  CollectionToDate: string;
  SettledFromDate: string;
  imported: string;
}
export interface LGenerateCoupons {
  ftfdtgc: string;
  genC: string;
  vagc: string;
  sc: string;
  st: string;
  tno: string;
  fi: string;
  gpc: string;
  noc: string;
  gc: string;
  pwa: string;
  sw: string;
  cl: string;
  sh: string;
  ee: string;
  ecc: string;
  aiN: string;
  rep: string;
  opReports: string;
  repQue: string;
  bilRep: string;
  qtaRep: string;
  loungelgb: string;
  dailyQtaRep: string;
  cardHistoryRep: string;
}

export interface LLounge {
  PleaseselectLoungeStatus: any;
  txtHeading: string;
  shift: string;
  txtDes: string;
  accessdenied: string;
  AccessDeniedformoduleUSERSactionDELETE: string;
  loungeName: string;
  loungeDisplayName: string;
  zone: string;
  area: string;
  email: string;
  products: string;
  productsku: string;
  type: string;
  currency: string;
  price: string;
  outletsettings: string;
  configure: string;
  clone: string;
  cloneExt: string;
  sourceoutlet: string;
  destoutlet: string;
  partners: string;
  selectpartner: string;
  selectallpartner: string;
  addoutletsetting: string;
  openingtime: string;
  closingtime: string;
  localstdtime: string;
  loungeType: string;
  loungeCategory: string;
  loungeBrand: string;
  businessLine: string;
  addressLine1: string;
  addressLine2: string;
  shard: string;
  parentLounge: string;
  country: string;
  // nearestPort: string;
  port: string;
  facilities: string;
  capacity: number;
  status: string;
  isActive: boolean;
  isSecured: boolean;
  securedBy: string;
  addNewLounge: string;
  newLoungeDes: string;
  loungeDescription: string;
  loungePhotos: string;
  users: string;
  loungeTimings: string;
  loungeShifts: string;
  addNewLoungePhotos: string;
  addNewUser: string;
  uploadPhoto: string;
  enterLoungeName: string;
  enterLoungeDisplayName: string;
  enterLoungeCode: string;
  enterParentLounge: string;
  enterAddressLine1: string;
  enterAddressLine2: string;
  enterShardKey: string;
  enterTerminalCode: string;
  enterSubTerminal: string;
  ddMMYY: Date;
  enterPhoneNo: number;
  enterFax: string;
  name: string;
  role: string;
  mobileNo: number;
  emailId: string;
  enterUserName: string;
  enterMobileNo: string;
  enterEmail: string;
  enterValidEmail: string;
  days: string;
  shifts: string;
  closed: boolean;
  timings: string;
  addNewTimings: string;
  addNewShifts: string;
  addHours: string;
  addTimings: string;
  attribute: string;
  outletOwnedBy: string;
  enterOutletOwnedBy: string;
  outletOperatedBy: string;
  enterOutletOperatedby: string;
  enterOutletBrand: string;
  enterOutletReciept: string;
  outletReciept: string;
  loungeArea: number;
  PleaseenteranOutletName: string;
  PleaseEnteranOutletDisplayName: string;
  Pleaseenterarea: string;
  PleaseselectanOutletCategory: string;
  InvalidLoungeArea: string;
  PleaseenteranOutletCode: string;
  PleaseenteranOutletType: string;
  PleaseenteranOutletBrand: string;
  PleaseenteranOutletOwnedBy: string;
  PleaseenteranOutletOperatedBy: string;
  PleaseselectaBusinessLine: string;
  Pleaseenteranoutletreciept: string;
  PleaseenteranAddressLine1: string;
  PleaseEnterAnShard: string;
  Pleaseselectaport: string;
  PleaseselectaJourneyType: string;
  PleaseselectaTravelDirection: string;
  PleaseenteraTerminalCode: string;
  PleaseselectaZone: string;
  PleaseenterCapacity: string;
  PleaseselectSecuredBy: string;
  PleaseselectaBaseCurrency: string;
  PleasechooseaDateOfOpening: string;
  PleaseenterPhoneNo: string;
  InvalidCapacityNo: string;
  CapacityCannotbeNegative: string;
  AreaCannotbeNegative: string;
  InvalidPhoneNo: string;
  nodatafound: string;
  enterThePort: string;
  availableoutlets: string;
  selectedoutlets: string;
  addnewoutletphotos: string;
  addoutletphotos: string;
  uploadphoto: string;
  choosefiles: string;
  nofilechoosen: string;
  deleteoutletphotoconfirmation: string;
  areyousureyouwanttodeletethisoutletphoto: string;
  yes: string;
  no: string;
}
export interface LHSBC {
  txtHeading: string;
  txtDes: string;
  year: string;
  month: string;
  outlet: string;
  noOfLoungeUse: string;
  uniqueCountForCreditCard: string;
  reset: string;
  runReport: string;
  export: string;
}

export interface LProduct {
  productname: string;
  producttype: string;
  productPackage: string;
  productCategory: string;
  currency: string;
  productprice: string;
  productsphotos: string;
  newproductphotos: string;
  uploadphoto: string;
  addproductphoto: string;
  export: string;
  loungeaccessrqu: string;
  loyaltypoints: string;
  productdescription: string;
  actions: string;
  product: string;
  viewandaddnewproductforoutlet: string;
  search: string;
  searchproduct: string;
  applicabletax: string;
  addnewproduct: string;
  fillthefollowingdetailstoaddnewproductforlounges: string;
  enterproductname: string;
  enterproductprice: string;
  enterloyaltypoints: string;
  enterapplicabletax: string;
  enterproductdescription: string;
  entersalesTerm: string;
  productavailableat: string;
  addproductatoutlet: string;
  addproductatPackage: string;
  addproductatlounge: string;
  setupproductatoutlet: string;
  localproductname: string;
  loungename: string;
  price: string;
  unitofmeasure: string;
  isavailable: string;
  reset: string;
  save: string;
  enterprice: string;
  enterlocalproductname: string;
  new: string;
  import: string;
  isactive: string;
  productsku: string;
  enterproductsku: string;
  lounge: string;
  enterlounge: string;
  fillthefollowingdetailstoaddnewproductforoutlet: string;
  selectProductType: string;
  skuValidationCheck: string;
  selectProductCategory: string;
  selectCurrency: string;
  positiveProductPrice: string;
  positiveLoyaltyPoints: string;
  positiveTax: string;
  enterServiceTime: string;
  selectOutlet: string;
  enterLocalProductName: string;
  enterPrice: string;
  priceShouldBePositive: string;
  selectUnitOfMeasure: string;
  enterTax: string;
  accessDeniedForDelete: string;
  accessDeniedForEdit: string;
  accessDenied: string;
  enterValidPartner: string;
  enterProductForeignProductId: string;
  servicetime: string;
  fulfilledby: string;
  selectout: string;
  outletname: string;
  productpartnerlink: string;
  addproductpartnerlink: string;
  lastmodifiedon: string;
  lastmodifiedby: string;
  addpartnerproduct: string;
  partnerproductid: string;
  enterpartnerproductid: string;
  addPartnerProduct: string;
  partnerPID: string;
  addPPL: string;
  partnerPIDP: string;
  deleteProductConfirmation: string;
  deleteProductApproval: string;
  yes: string;
  no: string;
  legacyProductId: string;
  legacyProductIdP: string;
  salesTerm: string;

  selectMinProducts: string;
  productPackageName: string;
  productPackagePrice: string;
  entitledQuantity: string;
  packageQuantity: string;
  enterEntitledQuantity: string;
  enterPackageQuantity: string;
  quantityShouldBeOne: string;
  enterPackageProductName: string;
}

export interface LUser {
  txtHeading: string;
  txtDes: string;
  username: string;
  remoteUserID: string;
  mobileNo: string;
  email: string;
  status: string;
  defaultLoungeAccess: string;
  defaultlanguage: string;
  enterdefaultoutlet: string;
  userType: string;
  businessUnit: string;
  isActive: boolean;
  EnteryourName: string;
  Selectyourtype: string;
  Selectyouroutletaccess: string;
  SelectMobileNumber: string;
  InvalidMobileNumber: string;
  PleaseEnteraValidemail: string;
  EnteryourremoteUserID: string;
  Selectlanguage: string;
  SelectBusinessLine: string;
  admin: string;
  businessUnitHead: string;
  finance: string;
  manager: string;
  gso: string;
  partner: string;
  loungeexecutive: string;
  outletaccess: string;
  nodatafound: string;
  title: string;
  DeleteUserConfirmation: string;
  AreyousureyouwanttodeletethisUser?: string;
  yes: string;
  no: string;
  accessdenied: string;
  AccessDeniedformoduleUSERSactionDELETE: string;
  roles: string;
}

export interface LMember {
  txtHeading: string;
  search: string;
  txtDes: string;
  addNewMember: string;
  newMemberDes: string;
  admissions: string;
  associatedPartners: string;
  admissionNumber: string;
  admissionDate: string;
  loungeName: string;
  partner: string;
  country: string;
  memberId: string;
  type: string;
  mobileNo: string;
  email: string;
  memberName: string;
  membershipLastUsedOn: string;
  status: string;
  lastAdmissionDate: string;
  admissionCount: string;
  complimentaryAdmission: string;
  searchMember: string;
  enterMemberId: string;
  nodatafound: string;
  guests: string;
  outlet: string;
  entrMobN: string;
  entrEmail: string;
}

export interface LAdmin {
  startDate: string;
  endDate1: string;
  dashboard: string;
  book: string;
  order: string;
  payment: string;
  support: string;
  testResult: string;
  defaultChat: string;
  masters: string;
  autoPricing: string;
  campaign: string;
  coupons: string;
  testUpload: string;
  listing: string;
  pincode: string;
  preCompanyDiscount: string;
  report: string;
  searchTemp: string;
  userMaster: string;
  noContent: string;
  org: string;
  contract: string;
  printlist: string;
  subData: string;
  orderDetail: string;
  orderContent: string;
  paymentDetail: string;
  paymentContent: string;
  thumbMiss: string;
  thumbContent: string;
  orderP: string;
  paymentP: string;
  thumbP: string;
  presentDetailTxt: string;
  repoType: string;
  fileType: string;
  fileName: string;
  createdOn: string;
  record: string;
  fromAmt: string;
  fromAmtP: string;
  toAmt: string;
  toAmtP: string;
  expToPdf: string;
  expToExcel: string;
  dashTxt: string;
  select: string;
  all: string;
  day7: string;
  day15: string;
  mnth1: string;
  mnth6: string;
  year1: string;
  bookTitleTxt: string;
  publishOrder: string;
  orderCountTxt: string;
  bookTxt: string;
  create: string;
  import: string;
  searchBook: string;
  bookTitle: string;
  bookTitleP: string;
  author: string;
  authorP: string;
  bookSize: string;
  bookSizeP: string;
  binding: string;
  papertype: string;
  prefectBind: string;
  pubFromDate: string;
  pubFromDateP: string;
  pubToDate: string;
  pubToDateP: string;
  lamination: string;
  gloss: string;
  glossLamination: string;
  mattLamination: string;
  presentBookTxt: string;
  interiorColor: string;
  createBook: string;
  createBookTxt: string;
  one: string;
  two: string;
  three: string;
  pubDate: string;
  pubDateP: string;
  paymentTxt: string;
  searchPayment: string;
  orderId: string;
  orderIdP: string;
  amountP: string;
  createdOnP: string;
  presentPay: string;
  currency: string;
  paid: string;
  fail: string;
  userMasterTxt: string;
  new: string;
  searchUser: string;
  uName: string;
  uNameP: string;
  userRole: string;
  selectRole: string;
  presentUser: string;
  contactNo: string;
  logDate: string;
  site: string;
  role: string;
  active: string;
  inactive: string;
  newUser: string;
  newUserTxt: string;
  orgName: string;
  orgNameP: string;
  siteName: string;
  siteNameP: string;
  firstName: string;
  firstNameP: string;
  lastName: string;
  lastNameP: string;
  email_user: string;
  email_userP: string;
  selectStatus: string;
  availRoles: string;
  roleDes: string;
  vOTP: string;
  vEmailOTP: string;
  emailOTP: string;
  verify: string;
  noOTP: string;
  resendOTP: string;
  vMobileOTP: string;
  mobileOTP: string;
  couponsTxt: string;
  searchCoupons: string;
  type: string;
  selectType: string;
  percent: string;
  absolute: string;
  coupTxt: string;
  code: string;
  coupCode: string;
  coupCP: string;
  from: string;
  fromP: string;
  to: string;
  toP: string;
  errFrom: string;
  errTo: string;
  value: string;
  valueP: string;
  valueErr: string;
  presentCoupTxt: string;
  validTo: string;
  validFrom: string;
  urlClip: string;
  createNewCoupTxt: string;
  createNewCoupSub: string;
  couponcode: string;
  coupontype: string;
  couponcodeP: string;
  statusErr: string;
  campaignTxt: string;
  searchCampaign: string;
  campaignName: string;
  campaignNameP: string;
  campaignNameErr: string;
  utmSource: string;
  utmSourceP: string;
  utmSourceErr: string;
  utmMedium: string;
  utmMediumP: string;
  utmMediumErr: string;
  presentCampaignTxt: string;
  campaignPreview: string;
  createNewCampaign: string;
  createNewCampaignTxt: string;
  campaignImage: string;
  chooseFile: string;
  chooseFileErr: string;
  campaignResult: string;
  seeResult: string;
  autoPricingTxt: string;
  log: string;
  removeRules: string;
  searchAutoPricing: string;
  modifiedFrom: string;
  modifiedFromP: string;
  modifiedTo: string;
  modifiedToP: string;
  isbn: string;
  isbnP: string;
  flipkart: string;
  flipkartLsp: string;
  amazonD: string;
  autoPricingLog: string;
  autoPricingLogTxt: string;
  autoPricingPresentLog: string;
  autoPricingPresent: string;
  stepDownPrice: string;
  minPrice: string;
  modifiedOn: string;
  channelAccount: string;
  stepUpPrice: string;
  maxPrice: string;
  modifiedBy: string;
  freq: string;
  lastProcessedOn: string;
  mrp: string;
  action: string;
  amazon: string;
  testResultTxt: string;
  searchRecord: string;
  testName: string;
  testNameP: string;
  percentP: string;
  correct: string;
  incorrect: string;
  isPass: string;
  presentTestTxt: string;
  authors: string;
  buyBox: string;
  buyBoxP: string;
  buyBoxPrice: string;
  maxListedPrice: string;
  reproListedPrice: string;
  message: string;
  updatedPrice: string;
  searchAutoPricingLog: string;
  sellerBox: string;
  sellerBoxTxt: string;
  sellerName: string;
  title: string;
  sellingPrice: string;
  logisticCharge: string;
  historyPricingTxt: string;
  noRecordHistoryPricingTxt: string;
  isbnPricingChange: string;
  searchTempTxt: string;
  searchTempNameP: string;
  createdByP: string;
  presentTemplateTxt: string;
  editSearchTemp: string;
  editSearchTempTxt: string;
  searchName: string;
  seeSearchResult: string;
  preCompanyDiscountTxt: string;
  searchCompany: string;
  companyName: string;
  companyNameP: string;
  users: string;
  userErr: string;
  availDisInSystem: string;
  discountFrom: string;
  discountValue: string;
  discountTo: string;
  createNewDiscount: string;
  createNewDiscountTxt: string;
  createGstNumber: string;
  createGstNumberP: string;
  user: string;
  userP: string;
  discountFromP: string;
  dicsountToP: string;
  discountValueP: string;
  list_unlist: string;
  list_unlistTxt: string;
  list_unlistSearch: string;
  fileNameP: string;
  presentListInSystem: string;
  totalRecord: string;
  unlisting: string;
  success: string;
  inProgress: string;
  progressCompleted: string;
  failure: string;
  createListing: string;
  createListingTxt: string;
  pleaseSelectSearch: string;
  genListing: string;
  genUnlisting: string;
  allRecordList: string;
  exportExcel: string;
  castingType: string;
  error: string;
  errorDes: string;
  price: string;
  pincodeTxt: string;
  countryName: string;
  countryNameP: string;
  pinc: string;
  pincP: string;
  city: string;
  cityP: string;
  state: string;
  stateP: string;
  created: string;
  newPincode: string;
  newPincodeTxt: string;
  region: string;
  regionP: string;
  east: string;
  west: string;
  north: string;
  south: string;
  organisationTxt: string;
  searchOrg: string;
  orgType: string;
  orgTypeP: string;
  selectOrgType: string;
  onboardingFrom: string;
  onboardingFromP: string;
  onboardingTo: string;
  onboardingToP: string;
  repro: string;
  private: string;
  onboardingOn: string;
  orgSettings: string;
  orgSettingTxt: string;
  contractMaster: string;
  contractMasterP: string;
  refresh: string;
  cancelContract: string;
  searchContract: string;
  partnerName: string;
  partnerNameP: string;
  contractType: string;
  contractStartDate: string;
  contractStartDateP: string;
  contractEndDate: string;
  contractEndDateP: string;
  presentContract: string;
  effStartDate: string;
  effEndDate: string;
  contractDetail: string;
  viewContractDetail: string;
  partnerType: string;
  partnerContract: string;
  effDateP: string;
  endDate: string;
  contractDuration: string;
  effDate: string;
  bindingColor: string;
  trimRange: string;
  distMargin: string;
  compMargin: string;
  publisher: string;
  skuIb: string;
  details: string;
  yrs2: string;
  printRate: string;
  partner: string;
  contractFromDate: string;
  contractToDate: string;
  shipFrom: string;
  shipTo: string;
  printlistTxt: string;
  searchPrintlist: string;
  presentPrintlist: string;
  printlistNo: string;
  printhouse: string;
  printlistType: string;
  newPrintlist: string;
  newPrintlistTxt: string;
  sDateFrom: string;
  sDateFromP: string;
  sDateTo: string;
  sDateToP: string;
  bindingType: string;
  selectBindingType: string;
  paperType: string;
  selectPaperType: string;
  selectManufacturer: string;
  selectManufacturerSite: string;
  genPrintlist: string;
  printlistDetails: string;
  orderoty: string;
  printedoty: string;
  pageType: string;
  pageCount: string;
  testUploadTxt: string;
  excelName: string;
  excelNameP: string;
  fileTypeP: string;
  successfull: string;
  failureRecords: string;
  rowNo: string;
  columnDate: string;
  colNo: string;
  description: string;
  colName: string;
  importErr: string;
  selectFile: string;
  matchHeaders: string;
  confirmData: string;
  downloadExcelTemp: string;
  openTemp: string;
  selectExcel: string;
  uploadFile: string;
  classesInSystem: string;
  classNumber: string;
  continue: string;
  goBack: string;
  exceltemplate: string;
  errInReading: string;
  goBackErr: string;
  scannedMsg: string;
  requiredMsg: string;
  columnFromExcel: string;
  assignedField: string;
  matched: string;
  includeImport: string;
  previewImport: string;
  errReading: string;
  checkFile: string;
  mistakeCell: string;
  importLoad: string;
  importComplete: string;
  successfulAdded: string;
  recordsfromfile: string;
  verifyfield: string;
  importguide: string;
  amount: string;
  createdBy: string;
  gstin: string;
  participateNameP: string;
  participateName: string;
  totalQuestion: string;
  question: string;
  testsubheading: string;
  testresultheading: string;
  textNameP: string;
  header: string;
  leftMenu: string;
}
export interface LPartnerResponse {
  partnerresponse: string;
  viewandaddnewpartnerresponseforlounge: string;
  searchpartnerresponse: string;
  partnername: string;
  responsestatus: string;
  requestfrom: string;
  requestto;
  string;
  request: string;
  response: string;
  date: string;
  type: string;
  status: string;
  event: string;
}

export interface LReports {
  benefit: string;
  arrtureVouchHead: string;
  arrtureVouchDesc: string;
  passName: string;
  flightNO: string;
  flightFrom: string;
  flightTo: string;
  airlineCode: string;
  dateFlight: string;
  timeFlight: string;
  classCode: string;
  seatNum: string;
  checkInNo: string;
  PrivilegStatus: string;
  WasOrderStatus: string;
  VoidID: string;
  UsedByArrturemembershipID: string;
  ArrturePrivilegeNumber: string;
  ArttureVoucherNumber: string;
  VoucherStatus: string;
  arrtureMemHead: string;
  arrtureMemDesc: string;
  OrderStatus: string;
  CardName: string;
  BoardingPassDetails: string;
  PassengerName: string;
  OrderId: string;
  serviceName: string;
  ServiceType: string;
  Phone: string;
  emailId: string;
  isSystem: string;
  url: string;
  correlationID: string;
  cardProduct: string;
  amexBillHead: string;
  amexBillDesc: string;
  market: string;
  AmexClientDetailsReport: string;
  AmexClientHeading: string;
  AmexClientDescription: string;
  BusinessUnit: string;
  Issuer: string;
  Product: string;
  CreateDate: string;
  ServiceNumber: string;
  City: string;
  LocationName: string;
  Quantity: string;
  NetPayment: string;
  actDesc: string;
  cType: string;
  bosOldHead: string;
  bosOldDesc: string;
  detailsOfactivityTransactionreportsmessage: string;
  monthlyTran: string;
  tranHead: string;
  trDesc: string;
  paxHeading: string;
  paxDesc: string;
  billMonth: string;
  sDate: string;
  eDate: string;
  date: string;

  boshead: string;
  bosdesc: string;
  reportMY: string;
  clientType: string;
  accountName: string;
  country: string;
  service: string;
  paxTotal: string;
  outlet: string;
  region: string;
  fromdate: string;
  todate: string;
  airlinecode: string;
  flightnumber: string;
  txtHeading: string;
  txtDes: string;
  txtHeadingcard: string;
  txtDescard: string;

  txtHeadingbp: string;
  txtDesbp: string;
  IssuingRegion: string;
  Region: string;
  Airport: string;
  Outlet: string;
  ClientType: string;
  ParentAccountName: string;
  AccountName: string;
  CardType: string;
  ReceiptNumber: string;
  ArrtureMemberID: string;
  TransactionDate: string;
  TransactionTime: string;
  CardHolderName: string;
  CardNumber: string;
  ServiceTime: string;
  Service: string;
  ServiceName: string;
  GuestName: string;
  searchboarding: string;
  PNR: string;
  FlightFrom: string;
  FlightTo: string;
  AirlineCode: string;
  flightNumber: string;
  AirlinesCodeNumber: string;
  DateOfFlight: string;
  FlightTime: string;
  ClassCode: string;
  SeatNumber: string;
  CheckinNumber: string;
  PAXStatus: string;
  FFN: string;
  Remarks: string;
  FFPCardType: string;
  EnterFlightNumber: string;
  EnterTokenName: string;
  DailyReport: string;
  generatePAX: string;
  hourly: string;
  count: string;
  reportQueue: string;
  rprtQueDesc: string;
  srchRprtQue: string;
  fillrprtqueue: string;
  reqReport: string;
  possalereport: string;
  pax: string;
  voidTxnRprt: string;
  adminiReports: string;
  selUsName: string;
  entercardtype: string;
  selectPartners: string;
}
export interface LVendor {
  addnewvendor: string;
  fillthefollowingdetailstoaddnewvendor: string;
  vendorname: string;
  entervendorname: string;
  vendortype: string;
  vendorcategory: string;
  taxidentificationnumber: string;
  entertaxidentificationnumber: string;
  status: string;
  vendorshortcode: string;
  entervendorshortcode: string;
  region: string;
  erpaccountingcode: string;
  searchvendor: string;
  vendor: string;
  vendorcontact: string;
  vendorentity: string;
  entervendorentity: string;
  vendorentityname: string;
  entervendorentityname: string;
  vieweditnewvendor: string;
  vendorentitycategory: string;
  vendortin: string;
  entervendortin: string;
  vendorsettings: string;
  itemsperpage: string;
  uploadlogo: string;

  pleaseentervendorname: string;
  pleaseselectvendortype: string;
  pleaseselectvendorcategory: string;
  pleaseentertin: string;
  pleaseselectstatus: string;
  pleaseentervendorshortname: string;
  pleaseentervendoraddressline1: string;
  pleaseentervendorpostalcode: string;
  pleaseentervendorstate: string;
  pleaseentervendorcity: string;

  pleasefirstcreatevendortosaveentity: string;
  entervendorentitytin: string;
  entervendorentitycategory: string;
  vendorentitycategorymustnotbeglobalifparentvendorisregional: string;
  vendorentitycategorymustnotbeglobalifparentvendorislocal: string;
  vendorentitycategorymustnotberegionalifparentvendorislocal: string;
  enterentityaddressline1: string;
  enterentitypostalcode: string;
  enterentitystate: string;
  enterentitycity: string;
  selectentitycountry: string;

  pleasefirstcreatevendortosavesupportcontact: string;
  entersupportname: string;
  entersupportdesignation: string;
  entersupportnumber: string;
  invalidcontactnumber: string;
  entersupportemail: string;
  pleaseenteravalidemail: string;
  entersupportentity: string;
  entersupporttype: string;
  deletevendorconfirmation: string;
  areyousureyouwanttodeletethisvendor: string;
  deletevendorentity: string;
  areyousureyouwanttodeletethisvendorentity: string;
  deletevendorcontact: string;
  areyousureyouwanttodeletethisvendorcontact: string;
  yes: string;
  no: string;
  accessDeniedformoduleVENDORactionDELETE: string;
  accessdenied: string;
}
// tslint:disable-next-line: no-empty-interface
export interface LAction {
  action: string;
  viewandaddnewactioninsystem: string;
  searchaction: string;
  actionname: string;
  actionshortname: string;
  actiondescription: string;
  status: string;
  actionurl: string;
  enteractionname: string;
  enteractionshortname: string;
  enteractiondescription: string;
  enteractionurl: string;
  isactive: string;
  addnewaction: string;
  fillthefollowingdetailstoaddnewaction: string;
  pleaseenteractionname: string;
  pleaseenteractionshortname: string;
  pleaseselectactiondescription: string;
  pleaseenteractionurl: string;
  deleteactionconfirmation: string;
  areyousureyouwanttodeletethisaction: string;
  yes: string;
  no: string;
  accessdenied: string;
  reqNum: string;
  type: string;
  createdon: string;
  createdBy: string;
  entrReqNum: string;
}
export interface LAirlinesCodes {
  airlinescodes: string;
  viewandaddnewairlinescodesinsystem: string;
  searchairlinescodes: string;
  iata: string;
  icao: string;
  airline: string;
  callsign: string;
  country: string;
  comments: string;
  enteriata: string;
  entericao: string;
  enterairline: string;
  entercallsign: string;
  entercountry: string;
  entercomments: string;
  addnewairlinescodes: string;
  fillthefollowingdetailstoaddnewairlinescodes: string;
}
export interface LOutletEvents {
  date: string;
  outletevents: string;
  viewandaddnewoutleteventsinsystem: string;
  searchoutletevents: string;
  outlet: string;
  category: string;
  remarks: string;
  showinreport: string;
  enteroutlet: string;
  entercategory: string;
  enterremarks: string;
  addoutletevents: string;
  fillthefollowingdetailstoaddoutletevents: string;
  dailyeventreport: string;
  downloadreport: string;
}

export interface LModule {
  module: string;
  viewandaddnewmoduleinsystem: string;
  searchmodule: string;
  modulename: string;
  moduleshortname: string;
  moduledescription: string;
  status: string;
  helpurl: string;
  entermodulename: string;
  entermoduleshortname: string;
  entermoduledescription: string;
  enterhelpurl: string;
  isactive: string;
  addnewmodule: string;
  fillthefollowingdetailstoaddnewmodule: string;
  moduleaction: string;
  addaction: string;
  addnewaction: string;
  pleaseentermodulename: string;
  pleaseentermoduleshortname: string;
  pleaseentermoduledescription: string;
  pleaseenterhelpurl: string;
  pleasefirstcreatemoduletosaveaction: string;
  deletemoduleconfirmation: string;
  areyousureyouwanttodeletethismodule: string;
  yes: string;
  no: string;
  accessDeniedformoduleMODULEactionDELETE: string;
  accessdenied: string;
}
export interface LGlobalSettings {
  txtHeading: string;
  txtdes: string;
  searchglobalsettings: string;
  lkCode: string;
  key1: string;
  key2: string;
  key3: string;
  key4: string;
  key5: string;
  keyCode: string;
  status: string;
  EnterlkCode: string;
  EnterkeyCode: string;
  Enterkey1: string;
  Enterkey2: string;
  Enterkey3: string;
  Enterkey4: string;
  Enterkey5: string;
  group: string;
  child: string;
  PleaseenteraLkCode: string;
  PleaseenterkeyCode: string;
  Pleaseenterakey1: string;
  Pleaseenterakey2: string;
  Pleaseenterkey3: string;
  Pleasenterkey4: string;
  Pleaseenterkey5: string;
}
export interface LDelayedFlight {
  delayedflightcontracts: string;
  viewandaddnewdelayedflightcontractsinsystem: string;
  airlines: string;
  airlinesno: string;
  paxcountrequired: string;
  accessduration: string;
  currency: string;
  agreedcontractamount: string;
  status: string;
  addnewdelayedflightcontract: string;
  fillthefollowingdetailstoaddnewdelayedflightcontracts: string;
  searchdelayedflightcontracts: string;
  enterairline: string;
  flightno: string;
  enterflightno: string;
  countryname: string;
  entercountryname: string;
  paxcountrequiringtheloungeaccess: string;
  enterpaxcountrequiringtheloungeaccess: string;
  hoursforwhichloungeaccessisneeded: string;
  enterhoursforwhichloungeaccessisneeded: string;
  defaultcurrency: string;
  enteragreedcontractamount: string;
  termsandcondition: string;
  entertermsandcondition: string;
  airlinecontactname: string;
  enterairlinecontactname: string;
  airlineemailID: string;
  enterairlineemailID: string;
  airlineaddressline1: string;
  enterairlineaddressline1: string;
  airlineaddressline2: string;
  enterairlineaddressline2: string;
  airlineaddresscountry: string;
  enterairlineaddresscountry: string;
  airlinezipcode: string;
  enterairlinezipcode: string;
}
export interface LRole {
  role: string;
  viewandaddnewroleinsystem: string;
  searchrole: string;
  rolename: string;
  roleshortname: string;
  roledescription: string;
  status: string;
  enterrolename: string;
  enterroleshortname: string;
  enterroledescription: string;
  isactive: string;
  addnewrole: string;
  fillthefollowingdetailstoaddnewrole: string;
  allowmoduleactions: string;
  denymoduleactions: string;
  addnewactionfordeny: string;
  addnewactionforallow: string;
  pleaseenterrolename: string;
  pleaseenterroleshortname: string;
  pleaseenterroledescription: string;
  pleasefirstcreateroletosaveaction: string;
  invalidmodulename: string;
  invalidactionname: string;
  accessDeniedformoduleROLEactionDELETE: string;
  accessdenied: string;
  confirmClone: string;
  roleclonemessage: string;
}
export interface LReceipt {
  receipttemplate: string;
  vieweditandaddnewreceipttemplate: string;
  searchreceipttemplate: string;
  templatename: string;
  entertemplatename: string;
  templatecategory: string;
  applicabletovendor: string;
  enterapplicablevendor: string;
  country: string;
  templatewidthinmm: string;
  entertemplatewidthinmm: string;
  fontsize: string;
  enterfontsize: string;
  fonttype: string;
  enterfonttype: string;
  templateshortcode: string;
  entertemplateshortcode: string;
  status: string;
  labelnames: string;
  description: string;
  isactive: string;
  addnewreceipttemplate: string;
  fillthefollowingdetailstoaddnewreceipttemplate: string;
  pleaseentertemplatename: string;
  pleaseentertemplatecategory: string;
  pleaseenterapplicabletovendor: string;
  pleaseselectcountry: string;
  pleaseselecttemplatewidth: string;
  pleaseenterfontsize: string;
  pleaseenterfonttype: string;
  pleaseentertemplateshortcode: string;
  accessdenied: string;
}
export interface LTax {
  tax: string;
  vieweditandaddnewtaxesforoutlet: string;
  searchtax: string;
  taxname: string;
  shortname: string;
  taxcategory: string;
  applicableon: string;
  country: string;
  status: string;
  addnewtax: string;
  fillthefollowingdetailstoaddnewtaxforlounges: string;
  isactive: string;
  taxcomponent: string;
  componentname: string;
  effectiverate: string;
  displayrate: string;
  entercomponentname: string;
  entereffectiverate: string;
  enterdisplayrate: string;
  entertaxname: string;
  entershortname: string;
  addcomponent: string;
  pleaseenterataxname: string;
  pleaseenterataxcode: string;
  pleaseselectataxcategory: string;
  pleaseselectaapplicableon: string;
  pleaseselectacountry: string;
  pleaseenteracomponentname: string;
  pleaseenteraeffectiverate: string;
  taxdescription: string;
}
export interface IChatBotConversation {
  chatBot: string;
  txtHeading: string;
  txtDes: string;
  simpleSearch: string;
  city: string;
  enterCityName: string;
  category: string;
  guestName: string;
  enterGuestName: string;
  guestEmail: string;
  enterGuestEmail: string;
  bin: string;
  tokenType: string;
  remarks: string;
  interactionDate: string;
  action: string;
}

export interface LDailyQuota {
  txtHeading: string;
  txtDes: string;
  outlet: string;
  reset: string;
  runReport: string;
  export: string;
  date: string;
  cardNumStartsWith: string;
  cardNumEndsWith: string;
  primary: string;
  accompany: string;
  child: string;
  transactiondt: string;
  transactiontm: string;
  cardHolderName: string;
  loungeEligiblity: string;
}

export interface IQuotaRep {
  txtHeading: string;
  txtDes: string;
  outlet: string;
  reset: string;
  runReport: string;
  export: string;
  date: string;
  cardNumStartsWith: string;
  cardNumEndsWith: string;
  remainingQuota: string;
  consumedQuota: string;
  totalQuota: string;
  transactiondt: string;
  transactiontm: string;
  runElligibility: string;
  endDt: string;
  startdt: string;
}

export interface ICardBinAccess {
  txtHeading: string;
  txtDes: string;
  outlet: string;
  sno: string;
  airport: string;
  outletAddress: string;
  search: string;
  searchTxt: string;
  foundres: string;
  enterBin: string;
}
export interface ICloneEnt {
  txtHeading: string;
  txtdes: string;
  destOutlet: string;
  cloneExisting: string;
  replaceExisting: string;
  cloneEnt: string;
  addEnt: string;
  rmEnt: string;
  selectSrc: string;
  selectDest: string;
  ImpctTokens: string;
  rmEnttxtdes: string;
  confirmDelete: string;
  confirmDeleteDesc: string;
  addNewInfo: string;
  copyExistingInfo: string;
}

export interface LDocumentTemp {
  documentTemplate: string,
  vewEdit: string,
  export: string,
  new: string,
  searchDocument: string,
  documentTemplateName: string,
  phEnterDTN: string,
  documentShortCode: string,
  phEDSC: string,
  status: string,
  reset: string,
  search: string,
  close: string,
  documentDescription: string,
  action: string,
  addNewDocumentTemplate: string,
  fillthefollowingdetails: string,
  documentStatus: string,
  documentType: string,
  templateDescription: string,
  phEnterTemplateDescription: string,
  uploadDocument: string,
  partner: string,
  partnerName: string,
  fieldDetails: string,
  fieldName: string,
  fieldTypec: string,
  promptTemplateID: string,
  description: string
}
